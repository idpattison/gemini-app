'use client'; // This component now needs to be a Client Component

// import type { Metadata } from "next";
import { Roboto } from "next/font/google";
import "./globals.css";
import Link from "next/link";
import Providers from './providers'; // Import the new Providers component
import { useSession, signIn, signOut } from 'next-auth/react'; // Import Auth.js hooks


const roboto = Roboto({
  weight: ['100', '300', '400', '500', '700', '900'],
  subsets: ["latin"],
  variable: "--font-roboto",
  display: 'swap',
});

// export const metadata: Metadata = {
//   title: "Gemini App",
//   description: "Generated by create next app",
// };

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en" data-theme="light">
      <body
        className={`${roboto.variable} font-sans antialiased`}
      >
        <Providers>
          {/* Navbar Component */}
          <AuthNavbar /> {/* Render the new AuthNavbar component */}
          {children}
        </Providers>

      </body>
    </html>
  );
}

// New AuthNavbar Client Component
function AuthNavbar() {
  const { data: session, status } = useSession(); // Get session data and status

  return (
    <nav className="navbar bg-base-300 text-base-content p-4 shadow-md">
      <div className="flex-1">
        <Link href="/" className="btn btn-ghost text-xl">My App</Link>
        <ul className="menu menu-horizontal px-1 ml-4">
          <li><Link href="/">Home</Link></li>
          <li><Link href="/contact">Contact</Link></li>
        </ul>
      </div>
      <div className="flex-none gap-2">
        {status === 'loading' && (
          <span className="loading loading-spinner loading-sm"></span>
        )}
        {status === 'authenticated' && session?.user ? (
          <div className="flex items-center gap-2">
            {session.user.image && (
              <img
                src={session.user.image}
                alt="User Avatar"
                className="w-8 h-8 rounded-full"
                referrerPolicy="no-referrer" // Important for some Google avatars
              />
            )}
            <span className="font-semibold">{session.user.name || session.user.email}</span>
            <button className="btn btn-sm btn-outline" onClick={() => signOut()}>Sign Out</button>
          </div>
        ) : (
          status === 'unauthenticated' && (
            <button className="btn btn-sm btn-primary" onClick={() => signIn('google')}>Sign In with Google</button>
          )
        )}
      </div>
    </nav>
  );
}

