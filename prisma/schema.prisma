// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Auth.js Models (Required by @auth/prisma-adapter)
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  todos         Todo[]    // NEW: Relation to Todo model

  @@map("users") // Optional: map table name to 'users'
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}


// Define the Todo model
model Todo {
  id        String   @id @default(uuid()) // Unique ID for each todo, using UUID
  name      String                      // The text of the todo
  completed Boolean  @default(false)    // Whether the todo is completed
  priority  Int      @default(0) // NEW FIELD: Added a priority field
  createdAt DateTime @default(now())   // Timestamp for when it was created
  updatedAt DateTime @updatedAt        // Timestamp for last update

  ownerId   String   // NEW: Foreign key to User
  owner     User     @relation(fields: [ownerId], references: [id]) // NEW: Relation to User model

  @@index([ownerId]) // Optional: Add an index for faster lookups by owner

}

